require('dotenv').config();
const { Telegraf, Markup } = require('telegraf')
var validator = require('validator');
import Datastore from 'nedb';
import axios from 'axios';
import jsdom from 'jsdom';
import { getTimer } from './modules/timer.js'

const bot = new Telegraf(process.env.TELEGRAM_TOKEN, {})

bot.start((ctx) => {
    try {
        ctx.replyWithHTML(`<b>–ü—Ä–∏–≤–µ—Ç, ${ctx.message.chat.first_name} üëãüëã</b>\n\n–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.`)
    } catch (e) { }
});


bot.on('sticker', (ctx) => ctx.reply('üëç'))


bot.command('/comands', async (ctx) => {
    try {
        ctx.replyWithHTML(`
–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
<b>–ü–û–ì–û–î–ê</b>
/w - –ø–æ–≥–æ–¥–∞ –≤ –ò–∂–µ–≤—Å–∫–µ
/w_yagul - –ø–æ–≥–æ–¥–∞ –≤ –Ø–≥—É–ª–µ
/w [–≥–æ—Ä–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º] - –ø–æ–≥–æ–¥–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ

<b>–¢–ê–ô–ú–ï–†–´</b>
/drink - –∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è –ø—å—è–Ω–∫–∞
/set_drink - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–¥—É —Å–ª–µ–¥—É—é—â–µ–π –ø—å—è–Ω–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥ —á—á.–º–º (–ø—Ä–∏–º. 31.12.2024 21:00)

<b>–†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø</b>
/p - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∞–º—ã–π –ª—É—á—à–∏–π –ø–æ—Å—Ç –ü–∏–∫–∞–±—É
`)
    } catch (e) {
        console.log(e)
    }
})

// bot.on('message', async (ctx) => {
bot.command('w', async (ctx) => {
    let location = undefined;
    let [first, ...rest] = ctx.update.message.text.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1));
    let city = rest.join(' ') || undefined;
    let cityName = undefined;

    if (!city) {
        location = 'Izhevsk';
        cityName = '–ò–∂–µ–≤—Å–∫';
    }
    else {
        location = city;
        cityName = city;
    }
    try {
        var weather_data = (await axios.get(`${process.env.WEATHER_SERVICE_API_URL}${location}`)).data
        if (weather_data.error === null && weather_data.result.length !== 0) {
            var data = weather_data.result[0];
            ctx.replyWithHTML
                (`
<b>${cityName} - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</b>

–°–µ–π—á–∞—Å
------------
—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>${data.current.temperature} ¬∞C</b>
–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>${data.current.feelslike} ¬∞C</b>
–≤–ª–∞–∂–Ω–æ—Å—Ç—å: <b>${data.current.humidity} %</b>
—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${data.current.winddisplay}</b>
–ø—Ä–∏–º–µ—á–∞–Ω–∏—è: ${(data.current.skytext).toLowerCase()}

–ó–∞–≤—Ç—Ä–∞
------------
—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>–æ—Ç ${data.forecast[2].low} –¥–æ ${data.forecast[2].high} ¬∞C</b>
–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: <b>${data.forecast[2].precip} %</b>
`);
        } else {
            ctx.reply("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        }
    } catch (e) { console.log(e) }
});


bot.command('w_yagul', async (ctx) => {
    let location = 'Yagul'
    try {
        var weather_data = (await axios.get(`${process.env.WEATHER_SERVICE_API_URL}${location}`)).data
        if (weather_data.error === null && weather_data.result.length !== 0) {
            var data = weather_data.result[0];
            ctx.replyWithHTML
                (`
<b>–Ø–≥—É–ª - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</b>

–°–µ–π—á–∞—Å
------------
—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>${data.current.temperature} ¬∞C</b>
–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>${data.current.feelslike} ¬∞C</b>
–≤–ª–∞–∂–Ω–æ—Å—Ç—å: <b>${data.current.humidity} %</b>
—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${data.current.winddisplay}</b>
–ø—Ä–∏–º–µ—á–∞–Ω–∏—è: ${(data.current.skytext).toLowerCase()}

–ó–∞–≤—Ç—Ä–∞
------------
—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>–æ—Ç ${data.forecast[2].low} –¥–æ ${data.forecast[2].high} ¬∞C</b>
–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: <b>${data.forecast[2].precip} %</b>
`);
        } else {
            ctx.reply("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        }
    } catch (e) { console.log(e) }
});

bot.command('p', async (ctx) => {
    const response = await axios.request({
        method: 'GET',
        url: 'https://pikabu.ru/story/zanimatelnaya_matematika_9017937',
        responseType: 'arraybuffer',
        responseEncoding: 'binary'
    });

    const decoder = new TextDecoder('windows-1251');
    let html = decoder.decode(response.data)

    // console.log(html)
    // const resp = await axios.get('https://pikabu.ru/story/zanimatelnaya_matematika_9017937', { responseEncoding: 'utf8' })
    const dom = new jsdom.JSDOM(html)
    const elementTitle = dom.window.document.querySelector('span.story__title-link').textContent
    const elementImg = dom.window.document.querySelector('.story-image__content > a').getAttribute('href')
    if (elementTitle) {
        ctx.replyWithHTML(`<b>${elementTitle}</b>${elementImg}`)
    }
});

bot.command('/drink', async (ctx) => {
    var db = new Datastore({ filename: './src/db/timer', autoload: true });
    db.loadDatabase();

    db.find({ key: 'eventTimestamp' }, function (err, eventTimestamp) {
        if (!eventTimestamp)
            ctx.replyWithHTML(`–û—à–∏–±–∫–∞`)
        else {
            let timerText = getTimer(eventTimestamp[0].value);
            if (timerText === false)
                ctx.replyWithHTML(`<b>–ü—å—è–Ω–∫–∞ –ø—Ä–æ—à–ª–∞! –¢–µ–ø–µ—Ä—å –≤—Å–ø–æ–º–∏–Ω–∞–π—Ç–µ –µ–µ –∏ –ø–ª–∞—á—å—Ç–µ ü§°</b>`)
            else
                ctx.replyWithHTML(`–ü—å–µ–º —á–µ—Ä–µ–∑:  <b>${timerText}</b>`)
        }
    });
});

bot.command('/set_drink', async (ctx) => {
    var dateReg = /^\d{2}([.])\d{2}\1\d{4}([ ])\d{2}([:])\d{2}$/
    let [first, ...rest] = ctx.update.message.text.split(' ');
    let newEventTimestamp = rest.join(' ') || undefined;
    if (!!newEventTimestamp && dateReg.test(newEventTimestamp)) {
        var db = new Datastore({ filename: './src/db/timer', autoload: true });
        db.loadDatabase();
        ctx.replyWithHTML(`OK`)
        // db.insert({ key: 'eventTimestamp', value: newEventTimestamp });
        db.update({ key: 'eventTimestamp' }, { key: 'eventTimestamp', value: newEventTimestamp }, {});
    }
    else {
        ctx.replyWithHTML(`https://sun6-23.userapi.com/impg/0RBbNd1XIddiS6-t7ZDzutrIlUT_XHikLx5a6g/Kk2absAFwYg.jpg?size=604x484&quality=96&sign=cb51229e8451439c9fbff803598c4de8&type=album`)
        ctx.replyWithHTML(`<b>–û–®–ò–ë–ö–ê</b>\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã / –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –¥–¥.–º–º.–≥–≥–≥ —á—á.–º–º (–ø—Ä–∏–º. 31.12.2024 21:00)`)
    }
});

bot.command('/help', async (ctx) => {
    ctx.replyWithHTML(`<b>–°–∞–º —Å–µ–±–µ –ø–æ–º–æ–≥–∏!</b>`)
});

bot.on('message', (ctx) => {
    let message = ctx.update.message.text.toLowerCase();
    if (message.includes('—Ç—ã —á–µ –ø–µ—Å')
        || message.includes('—Ç—ã —á–µ –ø—ë—Å')
        || message.includes('—Ç—ã —á–µ, –ø—ë—Å')
        || message.includes('—Ç—ã —á–µ, –ø–µ—Å')
        || message.includes('—Ç—ã –ø–µ—Å')
        || message.includes('—Ç—ã, –ø–µ—Å')
        || message.includes('—Ç—ã –ø—ë—Å')
        || message.includes('—Ç—ã, –ø—ë—Å')
        || message.includes('–ø—ë—Å')
        || message.includes('–ø–µ—Å')
        || message.includes('–ø—Å–∏–Ω–∞')
    ) {
        ctx.reply('–ì–∞–≤!')
    };

    if (message.includes('–Ω—É —á–µ —Ç–∞–º')
        || message.includes('–Ω—É —á—ë —Ç–∞–º')
        || message.includes('–Ω—É —á–æ —Ç–∞–º')
    ) {
        var db = new Datastore({ filename: './src/db/timer', autoload: true });
        db.loadDatabase();

        db.find({ key: 'eventTimestamp' }, function (err, eventTimestamp) {
            if (!eventTimestamp)
                ctx.replyWithHTML(`–û—à–∏–±–∫–∞`)
            else {
                let timerText = getTimer(eventTimestamp[0].value);
                if (timerText === false)
                    ctx.replyWithHTML(`<b>–ê –≤—Å–µ</b>`);
                else
                    ctx.replyWithHTML(`–ï—â—ë <b>${timerText}</b> –¥–æ –±—É—Ö—ã—á–∞`);
            }
        });
    }
});

bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))