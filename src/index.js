require('dotenv').config();
const { Telegraf, Markup } = require('telegraf')
const axios = require('axios');
const jsdom = require("jsdom");

const bot = new Telegraf(process.env.TELEGRAM_TOKEN, {})

bot.start((ctx) => {
    try {
        ctx.replyWithHTML(`<b>–ü—Ä–∏–≤–µ—Ç, ${ctx.message.chat.first_name} üëãüëã</b>\n\n–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.`)
    } catch (e) { }
})


bot.on('sticker', (ctx) => ctx.reply('üëç'))


bot.command('/comands', async (ctx) => {
    try {
        ctx.replyWithHTML(`
–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
<b>–ü–û–ì–û–î–ê</b>
/w - –ø–æ–≥–æ–¥–∞ –≤ –ò–∂–µ–≤—Å–∫–µ
/w_yagul - –ø–æ–≥–æ–¥–∞ –≤ –Ø–≥—É–ª–µ
/w [–≥–æ—Ä–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º] - –ø–æ–≥–æ–¥–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ

<b>–¢–ê–ô–ú–ï–†–´</b>
/drink - –∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è –ø—å—è–Ω–∫–∞

<b>–†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø</b>
/p - —Å–ª—É—á–∞–π–Ω—ã –ø–æ—Å—Ç —Å Pikabu
`)
    } catch (e) {
        console.log(e)
    }
})

// bot.on('message', async (ctx) => {
bot.command('w', async (ctx) => {
    let location = undefined;
    let [first, ...rest] = ctx.update.message.text.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1));
    let city = rest.join(' ') || undefined;
    let cityName = undefined;

    if (!city) {
        location = 'Izhevsk';
        cityName = '–ò–∂–µ–≤—Å–∫';
    }
    else {
        location = city;
        cityName = city;
    }
    try {
        var weather_data = (await axios.get(`${process.env.WEATHER_SERVICE_API_URL}${location}`)).data
        if (weather_data.error === null && weather_data.result.length !== 0) {
            var data = weather_data.result[0];
            ctx.replyWithHTML(`<b>${cityName} - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</b>\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>${data.current.temperature} ¬∞C</b>\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>${data.current.feelslike} ¬∞C</b>`);
        } else {
            ctx.reply("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        }
    } catch (e) { console.log(e) }
});


bot.command('w_yagul', async (ctx) => {
    let location = 'Yagul'
    try {
        var weather_data = (await axios.get(`${process.env.WEATHER_SERVICE_API_URL}${location}`)).data
        if (weather_data.error === null && weather_data.result.length !== 0) {
            var data = weather_data.result[0];
            ctx.replyWithHTML(`<b>–Ø–≥—É–ª - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</b>\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>${data.current.temperature} ¬∞C</b>\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>${data.current.feelslike} ¬∞C</b>`);
        } else {
            ctx.reply("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        }
    } catch (e) { console.log(e) }
});

bot.command('p', async (ctx) => {
    const response = await axios.request({
        method: 'GET',
        url: 'https://pikabu.ru/story/zanimatelnaya_matematika_9017937',
        responseType: 'arraybuffer',
        responseEncoding: 'binary'
    });

    const decoder = new TextDecoder('windows-1251');
    let html = decoder.decode(response.data)

    // console.log(html)
    // const resp = await axios.get('https://pikabu.ru/story/zanimatelnaya_matematika_9017937', { responseEncoding: 'utf8' })
    const dom = new jsdom.JSDOM(html)
    const elementTitle = dom.window.document.querySelector('span.story__title-link').textContent
    const elementImg = dom.window.document.querySelector('.story-image__content > a').getAttribute('href')
    if (elementTitle) {
        ctx.replyWithHTML(`<b>${elementTitle}</b>${elementImg}`)
    }
})

bot.command('/drink', async (ctx) => {
    const time = 1657893600
    const currentTime = new Date().getTime() / 1000;
    const result = time - currentTime;
    let text = `${parseInt(result / 60 / 60)}:${parseInt(result / 60 % 60)}:${parseInt(result % 60)}`
    ctx.replyWithHTML(`–ü—å–µ–º —á–µ—Ä–µ–∑:  <b>${text}</b>`)
})

bot.hears('—Ç—ã —á–µ –ø–µ—Å', (ctx) => {
    // if (ctx.update.message.text.toLowerCase().includes('—Ç—ã —á–µ –ø–µ—Å')
    //     || ctx.update.message.text.toLowerCase().includes('—Ç—ã —á–µ –ø—ë—Å')
    //     || ctx.update.message.text.toLowerCase().includes('—Ç—ã —á–µ, –ø—ë—Å')
    //     || ctx.update.message.text.toLowerCase().includes('—Ç—ã —á–µ, –ø–µ—Å')
    // )
        return ctx.reply('–ì–∞–≤!')
})

bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))